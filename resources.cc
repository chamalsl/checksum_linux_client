#include <gio/gio.h>

#if defined (__ELF__) && ( __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 6))
# define SECTION __attribute__ ((section (".gresource.resources"), aligned (sizeof(void *) > 8 ? sizeof(void *) : 8)))
#else
# define SECTION
#endif

static const SECTION union { const guint8 data[2685]; const double alignment; void * const ptr;}  resources_resource_data = {
  "\107\126\141\162\151\141\156\164\000\000\000\000\000\000\000\000"
  "\030\000\000\000\344\000\000\000\000\000\000\050\007\000\000\000"
  "\000\000\000\000\000\000\000\000\002\000\000\000\005\000\000\000"
  "\007\000\000\000\007\000\000\000\007\000\000\000\003\337\244\201"
  "\004\000\000\000\344\000\000\000\007\000\166\000\360\000\000\000"
  "\013\001\000\000\202\360\204\264\006\000\000\000\013\001\000\000"
  "\013\000\166\000\030\001\000\000\341\003\000\000\324\265\002\000"
  "\377\377\377\377\341\003\000\000\001\000\114\000\344\003\000\000"
  "\354\003\000\000\231\324\102\021\006\000\000\000\354\003\000\000"
  "\011\000\166\000\370\003\000\000\025\007\000\000\235\067\312\174"
  "\002\000\000\000\025\007\000\000\005\000\114\000\034\007\000\000"
  "\040\007\000\000\136\227\073\346\006\000\000\000\040\007\000\000"
  "\013\000\166\000\060\007\000\000\150\012\000\000\231\027\304\163"
  "\002\000\000\000\150\012\000\000\007\000\114\000\160\012\000\000"
  "\174\012\000\000\126\105\122\123\111\117\116\000\000\000\000\000"
  "\013\000\000\000\000\000\000\000\060\056\061\056\060\055\141\154"
  "\160\150\141\000\000\050\165\165\141\171\051\167\141\162\156\151"
  "\156\147\056\160\156\147\000\000\271\002\000\000\000\000\000\000"
  "\211\120\116\107\015\012\032\012\000\000\000\015\111\110\104\122"
  "\000\000\000\036\000\000\000\036\010\006\000\000\000\073\060\256"
  "\242\000\000\002\200\111\104\101\124\110\307\355\327\117\210\125"
  "\145\030\307\361\317\071\167\234\077\152\043\027\107\121\334\270"
  "\222\023\111\141\314\001\103\305\235\233\331\134\005\303\114\221"
  "\126\121\213\300\332\206\273\042\350\017\201\102\204\202\013\205"
  "\040\005\147\163\165\347\250\140\163\320\222\226\027\011\033\151"
  "\021\102\120\122\302\250\347\314\155\321\173\145\032\316\334\173"
  "\347\166\107\004\173\340\300\341\345\175\337\337\373\175\337\337"
  "\171\236\367\360\177\074\353\221\324\153\225\244\136\253\364\072"
  "\076\352\125\024\333\261\022\067\032\023\223\367\227\072\107\334"
  "\343\202\007\161\000\137\342\144\122\257\255\171\132\302\253\261"
  "\013\015\024\330\222\324\153\361\262\012\047\365\332\040\336\302"
  "\054\116\340\273\260\355\103\313\115\274\001\157\343\102\226\026"
  "\227\247\307\213\367\361\052\136\131\012\165\274\104\332\325\370"
  "\002\243\370\006\242\310\146\174\215\167\260\152\271\210\127\204"
  "\061\127\263\264\270\333\152\314\322\142\072\274\276\324\055\165"
  "\274\004\332\201\340\344\227\361\001\344\171\123\236\067\133\135"
  "\276\012\107\060\332\157\342\315\370\004\027\263\264\230\311\363"
  "\246\251\053\367\114\135\271\047\317\233\055\352\133\070\024\014"
  "\370\337\205\223\172\155\030\357\342\047\174\334\152\057\232\377"
  "\074\363\042\103\032\022\113\137\210\327\343\020\146\262\264\370"
  "\065\230\312\332\352\240\265\325\101\121\364\344\254\157\340\046"
  "\016\167\242\216\273\240\035\301\101\374\205\243\377\312\267\221"
  "\047\242\255\230\332\126\254\303\176\274\320\263\160\160\350\070"
  "\336\304\157\323\343\305\325\116\013\035\031\160\014\347\160\260"
  "\035\165\047\342\021\354\305\003\274\036\276\331\216\061\265\255"
  "\030\353\104\035\167\240\335\035\266\371\160\226\026\077\167\153"
  "\377\156\250\333\021\157\304\161\174\233\245\305\355\322\301\161"
  "\044\216\243\236\250\343\066\205\340\010\176\307\114\131\237\112"
  "\045\222\044\243\222\144\124\245\022\265\243\176\043\030\264\053"
  "\342\115\170\017\037\146\151\361\171\131\207\207\217\346\234\072"
  "\175\307\251\323\167\074\174\064\127\072\111\050\040\051\266\056"
  "\114\245\161\011\355\032\174\206\007\347\137\234\313\027\065\107"
  "\034\031\253\016\031\253\016\055\272\335\301\214\067\313\312\146"
  "\124\142\250\075\041\357\236\314\322\342\243\166\046\172\034\362"
  "\364\212\201\305\157\120\315\246\231\327\276\257\134\013\265\373"
  "\207\306\304\344\134\031\161\025\237\206\144\161\266\143\251\032"
  "\210\332\212\316\243\276\205\235\363\215\266\220\170\003\176\304"
  "\031\374\202\146\237\056\245\043\330\207\153\070\326\230\230\234"
  "\135\110\374\047\056\341\276\376\306\054\256\143\007\206\113\257"
  "\267\111\275\266\012\171\037\151\347\033\171\270\061\061\371\307"
  "\363\371\047\362\067\210\301\273\332\314\203\055\354\000\000\000"
  "\000\111\105\116\104\256\102\140\202\000\000\050\165\165\141\171"
  "\051\057\000\000\004\000\000\000\006\000\000\000\167\162\157\156"
  "\147\056\160\156\147\000\000\000\015\003\000\000\000\000\000\000"
  "\211\120\116\107\015\012\032\012\000\000\000\015\111\110\104\122"
  "\000\000\000\036\000\000\000\036\010\006\000\000\000\073\060\256"
  "\242\000\000\000\011\160\110\131\163\000\000\056\043\000\000\056"
  "\043\001\170\245\077\166\000\000\002\277\111\104\101\124\110\307"
  "\355\326\115\210\225\125\034\006\360\337\035\207\321\305\304\214"
  "\232\224\035\106\137\023\202\104\020\121\150\021\112\104\052\021"
  "\204\137\140\330\027\250\010\121\270\020\205\300\206\250\100\213"
  "\054\305\066\121\010\211\241\056\306\057\360\013\045\160\021\056"
  "\242\145\101\026\302\073\352\041\102\260\121\011\027\346\344\346"
  "\077\162\271\334\073\367\336\231\241\225\147\365\362\276\347\075"
  "\317\171\236\377\363\377\340\321\372\237\126\145\344\241\114\251"
  "\202\056\164\343\166\221\363\275\211\002\051\123\232\124\344\174"
  "\277\372\135\107\325\163\027\026\342\015\054\050\123\352\232\040"
  "\320\076\274\131\246\224\032\001\167\143\061\126\343\035\074\023"
  "\052\214\025\260\243\114\351\051\154\303\156\054\053\123\232\064"
  "\362\275\263\152\357\155\234\303\164\274\206\273\370\034\203\143"
  "\000\175\034\057\140\011\126\340\010\176\250\226\373\041\343\210"
  "\351\025\174\213\363\130\217\376\062\245\242\115\320\251\330\204"
  "\117\261\012\077\343\153\134\257\153\256\232\237\147\243\077\144"
  "\077\206\117\212\234\007\233\111\213\047\102\255\125\170\032\247"
  "\360\025\176\257\065\153\145\224\203\012\174\020\340\337\343\263"
  "\042\347\334\202\264\057\305\145\257\342\054\162\221\363\177\015"
  "\323\151\024\346\073\260\034\147\002\174\260\146\317\064\274\205"
  "\215\170\014\077\142\027\176\253\115\241\106\256\256\267\256\341"
  "\002\376\015\371\166\304\145\106\100\147\141\073\326\340\016\276"
  "\303\316\220\366\176\113\005\244\211\103\067\343\155\114\305\011"
  "\174\210\311\341\203\265\270\034\246\034\300\120\075\151\333\006"
  "\256\222\363\175\154\300\160\304\174\006\136\011\003\035\306\245"
  "\042\347\133\155\227\314\026\053\320\126\274\032\305\246\073\114"
  "\324\217\253\105\316\303\355\244\135\107\253\033\213\234\257\005"
  "\323\033\230\206\133\370\005\177\267\013\332\216\324\025\314\012"
  "\166\153\002\260\053\114\267\007\247\213\234\357\116\050\343\150"
  "\026\363\303\275\253\161\024\357\342\044\146\342\165\254\053\123"
  "\232\336\016\160\147\013\114\347\005\323\371\070\210\057\213\234"
  "\007\313\224\156\240\007\353\060\027\067\313\224\116\067\113\243"
  "\246\214\003\164\066\266\340\305\310\347\207\005\244\310\371\117"
  "\354\305\176\144\314\301\222\062\245\336\061\307\270\114\151\062"
  "\236\015\320\225\070\216\217\353\325\353\150\012\057\107\076\367"
  "\106\345\372\246\310\371\172\313\300\301\262\027\313\042\166\113"
  "\253\232\104\071\212\072\275\001\374\036\022\366\141\367\150\206"
  "\353\250\141\371\034\276\210\132\273\020\207\202\151\331\044\325"
  "\206\342\202\077\141\112\204\146\161\234\331\030\070\230\246\160"
  "\353\332\160\353\045\354\152\326\016\253\300\157\306\340\060\200"
  "\276\070\153\121\243\021\252\332\134\303\061\010\134\304\001\174"
  "\324\054\116\165\300\377\210\126\072\200\005\321\042\173\352\215"
  "\120\225\032\251\147\306\145\376\052\162\376\147\034\363\326\223"
  "\170\036\277\342\112\323\211\265\114\251\062\236\001\257\316\260"
  "\067\041\147\075\132\343\132\017\000\175\345\367\310\070\343\347"
  "\221\000\000\000\000\111\105\116\104\256\102\140\202\000\000\050"
  "\165\165\141\171\051\144\141\164\141\057\000\000\000\000\000\000"
  "\143\157\162\162\145\143\164\056\160\156\147\000\000\000\000\000"
  "\050\003\000\000\000\000\000\000\211\120\116\107\015\012\032\012"
  "\000\000\000\015\111\110\104\122\000\000\000\036\000\000\000\036"
  "\010\002\000\000\000\264\122\071\365\000\000\000\011\160\110\131"
  "\163\000\000\056\043\000\000\056\043\001\170\245\077\166\000\000"
  "\002\332\111\104\101\124\110\307\355\226\111\123\023\101\030\206"
  "\173\231\265\063\141\022\102\010\220\260\030\002\204\125\101\313"
  "\122\271\371\067\374\217\126\171\360\240\007\157\122\142\121\200"
  "\041\206\260\204\045\004\254\204\045\204\231\311\114\246\247\247"
  "\075\120\145\011\122\201\110\070\130\345\167\357\247\237\256\356"
  "\357\375\032\272\056\005\017\123\010\074\130\375\107\137\053\341"
  "\076\213\175\356\073\254\341\370\216\202\024\005\313\010\242\366"
  "\130\163\300\015\317\314\134\174\177\127\376\260\141\156\333\314"
  "\151\233\265\313\334\202\271\373\366\364\343\147\167\375\215\357"
  "\304\225\236\200\100\332\140\315\001\257\322\332\262\221\315\322"
  "\335\020\044\072\326\004\044\264\347\032\135\346\026\353\245\145"
  "\173\275\354\233\103\070\072\102\222\001\114\332\200\276\124\316"
  "\230\353\073\254\034\105\332\254\072\076\100\022\022\226\332\200"
  "\166\175\172\140\037\256\070\371\143\337\114\342\330\214\066\036"
  "\026\165\010\340\175\321\034\360\232\173\221\263\066\367\275\112"
  "\004\222\031\165\244\137\355\373\123\371\157\320\256\117\113\366"
  "\121\326\336\252\161\073\201\043\151\065\245\337\244\334\062\372"
  "\122\071\153\155\154\320\222\006\345\131\145\354\021\031\220\157"
  "\122\276\216\146\234\331\314\261\230\115\175\332\104\171\315\336"
  "\254\362\172\037\352\234\012\214\105\344\116\014\361\055\215\316"
  "\070\073\167\153\173\365\203\013\317\350\123\172\022\152\057\021"
  "\310\357\047\345\200\233\324\314\131\233\171\132\324\240\374\130"
  "\031\115\222\101\025\053\267\147\210\307\131\311\376\361\376\354"
  "\323\026\075\230\224\206\347\365\247\043\201\144\130\012\111\110"
  "\274\334\200\161\277\322\070\311\073\073\147\176\075\045\304\046"
  "\311\110\023\345\353\215\356\161\357\224\235\027\274\112\231\325"
  "\366\351\321\263\372\344\134\160\172\210\364\007\305\240\000\261"
  "\345\131\333\365\275\155\172\010\041\114\211\211\101\322\337\104"
  "\371\012\132\200\070\256\364\276\016\276\204\006\312\323\203\257"
  "\164\247\150\034\027\032\305\127\332\334\124\060\335\045\107\052"
  "\215\223\125\053\127\362\253\011\024\176\022\230\210\312\221\046"
  "\312\127\320\030\342\056\271\163\276\363\171\237\022\373\146\344"
  "\126\234\374\276\127\131\150\344\113\336\361\176\343\160\222\214"
  "\036\323\263\115\132\364\071\117\211\361\024\031\012\010\201\026"
  "\362\132\100\102\104\016\007\105\255\137\215\117\327\323\113\106"
  "\146\321\316\026\331\351\231\365\145\311\131\207\234\037\262\152"
  "\030\251\151\045\331\055\167\141\210\132\033\005\020\100\031\111"
  "\061\045\252\213\035\061\071\072\150\304\027\314\345\125\267\260"
  "\112\213\030\040\016\370\270\230\110\007\206\065\121\273\261\115"
  "\156\317\153\010\240\212\225\004\211\353\142\107\134\351\115\032"
  "\231\305\372\132\301\053\073\334\033\020\172\142\162\267\204\304"
  "\173\015\060\001\342\220\244\117\010\244\127\211\115\130\243\031"
  "\063\127\361\252\057\072\146\303\222\176\253\062\000\000\336\345"
  "\213\303\001\157\260\306\071\255\331\314\011\211\172\207\030\154"
  "\376\066\132\100\377\032\262\076\340\010\100\004\357\224\074\055"
  "\314\106\004\121\113\141\366\157\176\161\176\002\256\234\123\334"
  "\334\004\211\263\000\000\000\000\111\105\116\104\256\102\140\202"
  "\000\000\050\165\165\141\171\051\151\155\141\147\145\163\057\000"
  "\005\000\000\000\001\000\000\000\003\000\000\000" };

static GStaticResource static_resource = { resources_resource_data.data, sizeof (resources_resource_data.data) - 1 /* nul terminator */, NULL, NULL, NULL };

G_MODULE_EXPORT
GResource *resources_get_resource (void);
GResource *resources_get_resource (void)
{
  return g_static_resource_get_resource (&static_resource);
}
/* GLIB - Library of useful routines for C programming
 * Copyright (C) 1995-1997  Peter Mattis, Spencer Kimball and Josh MacDonald
 *
 * SPDX-License-Identifier: LGPL-2.1-or-later
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Modified by the GLib Team and others 1997-2000.  See the AUTHORS
 * file for a list of people on the GLib Team.  See the ChangeLog
 * files for a list of changes.  These files are distributed with
 * GLib at ftp://ftp.gtk.org/pub/gtk/.
 */

#ifndef __G_CONSTRUCTOR_H__
#define __G_CONSTRUCTOR_H__

/*
  If G_HAS_CONSTRUCTORS is true then the compiler support *both* constructors and
  destructors, in a usable way, including e.g. on library unload. If not you're on
  your own.

  Some compilers need #pragma to handle this, which does not work with macros,
  so the way you need to use this is (for constructors):

  #ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
  #pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(my_constructor)
  #endif
  G_DEFINE_CONSTRUCTOR(my_constructor)
  static void my_constructor(void) {
   ...
  }

*/

#ifndef __GTK_DOC_IGNORE__

#if  __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)

#define G_HAS_CONSTRUCTORS 1

#define G_DEFINE_CONSTRUCTOR(_func) static void __attribute__((constructor)) _func (void);
#define G_DEFINE_DESTRUCTOR(_func) static void __attribute__((destructor)) _func (void);

#elif defined (_MSC_VER)

/*
 * Only try to include gslist.h if not already included via glib.h,
 * so that items using gconstructor.h outside of GLib (such as
 * GResources) continue to build properly.
 */
#ifndef __G_LIB_H__
#include "gslist.h"
#endif

#include <stdlib.h>

#define G_HAS_CONSTRUCTORS 1

/* We do some weird things to avoid the constructors being optimized
 * away on VS2015 if WholeProgramOptimization is enabled. First we
 * make a reference to the array from the wrapper to make sure its
 * references. Then we use a pragma to make sure the wrapper function
 * symbol is always included at the link stage. Also, the symbols
 * need to be extern (but not dllexport), even though they are not
 * really used from another object file.
 */

/* We need to account for differences between the mangling of symbols
 * for x86 and x64/ARM/ARM64 programs, as symbols on x86 are prefixed
 * with an underscore but symbols on x64/ARM/ARM64 are not.
 */
#ifdef _M_IX86
#define G_MSVC_SYMBOL_PREFIX "_"
#else
#define G_MSVC_SYMBOL_PREFIX ""
#endif

#define G_DEFINE_CONSTRUCTOR(_func) G_MSVC_CTOR (_func, G_MSVC_SYMBOL_PREFIX)
#define G_DEFINE_DESTRUCTOR(_func) G_MSVC_DTOR (_func, G_MSVC_SYMBOL_PREFIX)

#define G_MSVC_CTOR(_func,_sym_prefix) \
  static void _func(void); \
  extern int (* _array ## _func)(void);              \
  int _func ## _wrapper(void);              \
  int _func ## _wrapper(void) { _func(); g_slist_find (NULL,  _array ## _func); return 0; } \
  __pragma(comment(linker,"/include:" _sym_prefix # _func "_wrapper")) \
  __pragma(section(".CRT$XCU",read)) \
  __declspec(allocate(".CRT$XCU")) int (* _array ## _func)(void) = _func ## _wrapper;

#define G_MSVC_DTOR(_func,_sym_prefix) \
  static void _func(void); \
  extern int (* _array ## _func)(void);              \
  int _func ## _constructor(void);              \
  int _func ## _constructor(void) { atexit (_func); g_slist_find (NULL,  _array ## _func); return 0; } \
   __pragma(comment(linker,"/include:" _sym_prefix # _func "_constructor")) \
  __pragma(section(".CRT$XCU",read)) \
  __declspec(allocate(".CRT$XCU")) int (* _array ## _func)(void) = _func ## _constructor;

#elif defined(__SUNPRO_C)

/* This is not tested, but i believe it should work, based on:
 * http://opensource.apple.com/source/OpenSSL098/OpenSSL098-35/src/fips/fips_premain.c
 */

#define G_HAS_CONSTRUCTORS 1

#define G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA 1
#define G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA 1

#define G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(_func) \
  init(_func)
#define G_DEFINE_CONSTRUCTOR(_func) \
  static void _func(void);

#define G_DEFINE_DESTRUCTOR_PRAGMA_ARGS(_func) \
  fini(_func)
#define G_DEFINE_DESTRUCTOR(_func) \
  static void _func(void);

#else

/* constructors not supported for this compiler */

#endif

#endif /* __GTK_DOC_IGNORE__ */
#endif /* __G_CONSTRUCTOR_H__ */

#ifdef G_HAS_CONSTRUCTORS

#ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
#pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(resourcesresource_constructor)
#endif
G_DEFINE_CONSTRUCTOR(resourcesresource_constructor)
#ifdef G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA
#pragma G_DEFINE_DESTRUCTOR_PRAGMA_ARGS(resourcesresource_destructor)
#endif
G_DEFINE_DESTRUCTOR(resourcesresource_destructor)

#else
#warning "Constructor not supported on this compiler, linking in resources will not work"
#endif

static void resourcesresource_constructor (void)
{
  g_static_resource_init (&static_resource);
}

static void resourcesresource_destructor (void)
{
  g_static_resource_fini (&static_resource);
}
