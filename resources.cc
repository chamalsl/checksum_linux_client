#include <gio/gio.h>

#if defined (__ELF__) && ( __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 6))
# define SECTION __attribute__ ((section (".gresource.resources"), aligned (sizeof(void *) > 8 ? sizeof(void *) : 8)))
#else
# define SECTION
#endif

static const SECTION union { const guint8 data[3157]; const double alignment; void * const ptr;}  resources_resource_data = {
  "\107\126\141\162\151\141\156\164\000\000\000\000\000\000\000\000"
  "\030\000\000\000\000\001\000\000\000\000\000\050\010\000\000\000"
  "\000\000\000\000\000\000\000\000\002\000\000\000\002\000\000\000"
  "\003\000\000\000\005\000\000\000\007\000\000\000\007\000\000\000"
  "\231\027\304\163\003\000\000\000\000\001\000\000\007\000\114\000"
  "\010\001\000\000\030\001\000\000\051\245\073\346\000\000\000\000"
  "\030\001\000\000\013\000\166\000\050\001\000\000\117\002\000\000"
  "\003\337\244\201\005\000\000\000\117\002\000\000\007\000\166\000"
  "\130\002\000\000\162\002\000\000\324\265\002\000\377\377\377\377"
  "\162\002\000\000\001\000\114\000\164\002\000\000\174\002\000\000"
  "\144\342\102\021\000\000\000\000\174\002\000\000\011\000\166\000"
  "\210\002\000\000\337\003\000\000\235\067\312\174\003\000\000\000"
  "\337\003\000\000\005\000\114\000\344\003\000\000\350\003\000\000"
  "\115\376\204\264\000\000\000\000\350\003\000\000\013\000\166\000"
  "\370\003\000\000\163\005\000\000\307\167\364\054\000\000\000\000"
  "\163\005\000\000\013\000\166\000\200\005\000\000\124\014\000\000"
  "\151\155\141\147\145\163\057\000\007\000\000\000\001\000\000\000"
  "\006\000\000\000\004\000\000\000\143\157\162\162\145\143\164\056"
  "\163\166\147\000\000\000\000\000\027\001\000\000\000\000\000\000"
  "\074\163\166\147\040\170\155\154\156\163\075\042\150\164\164\160"
  "\072\057\057\167\167\167\056\167\063\056\157\162\147\057\062\060"
  "\060\060\057\163\166\147\042\040\166\151\145\167\102\157\170\075"
  "\042\060\040\060\040\062\064\040\062\064\042\040\146\151\154\154"
  "\075\042\156\157\156\145\042\040\163\164\162\157\153\145\075\042"
  "\147\162\145\145\156\042\040\163\164\162\157\153\145\055\167\151"
  "\144\164\150\075\042\062\042\040\163\164\162\157\153\145\055\154"
  "\151\156\145\143\141\160\075\042\162\157\165\156\144\042\040\163"
  "\164\162\157\153\145\055\154\151\156\145\152\157\151\156\075\042"
  "\162\157\165\156\144\042\076\012\040\040\040\040\074\143\151\162"
  "\143\154\145\040\143\170\075\042\061\062\042\040\143\171\075\042"
  "\061\062\042\040\162\075\042\061\060\042\040\163\164\162\157\153"
  "\145\075\042\147\162\145\145\156\042\040\146\151\154\154\075\042"
  "\156\157\156\145\042\057\076\012\040\040\040\040\074\160\141\164"
  "\150\040\144\075\042\115\071\040\061\062\154\062\040\062\154\064"
  "\055\064\042\040\163\164\162\157\153\145\075\042\147\162\145\145"
  "\156\042\040\146\151\154\154\075\042\156\157\156\145\042\057\076"
  "\012\074\057\163\166\147\076\000\000\050\165\165\141\171\051\126"
  "\105\122\123\111\117\116\000\000\012\000\000\000\000\000\000\000"
  "\060\056\061\056\060\055\142\145\164\141\000\000\050\165\165\141"
  "\171\051\057\000\005\000\000\000\000\000\000\000\167\162\157\156"
  "\147\056\163\166\147\000\000\000\107\001\000\000\000\000\000\000"
  "\074\163\166\147\040\170\155\154\156\163\075\042\150\164\164\160"
  "\072\057\057\167\167\167\056\167\063\056\157\162\147\057\062\060"
  "\060\060\057\163\166\147\042\040\166\151\145\167\102\157\170\075"
  "\042\060\040\060\040\062\064\040\062\064\042\040\167\151\144\164"
  "\150\075\042\062\064\042\040\150\145\151\147\150\164\075\042\062"
  "\064\042\040\146\151\154\154\075\042\162\145\144\042\076\012\040"
  "\040\040\040\074\143\151\162\143\154\145\040\143\170\075\042\061"
  "\062\042\040\143\171\075\042\061\062\042\040\162\075\042\061\060"
  "\042\040\163\164\162\157\153\145\075\042\162\145\144\042\040\163"
  "\164\162\157\153\145\055\167\151\144\164\150\075\042\062\042\040"
  "\146\151\154\154\075\042\156\157\156\145\042\040\057\076\012\040"
  "\040\040\040\074\154\151\156\145\040\170\061\075\042\070\042\040"
  "\171\061\075\042\070\042\040\170\062\075\042\061\066\042\040\171"
  "\062\075\042\061\066\042\040\163\164\162\157\153\145\075\042\162"
  "\145\144\042\040\163\164\162\157\153\145\055\167\151\144\164\150"
  "\075\042\062\042\040\057\076\012\040\040\040\040\074\154\151\156"
  "\145\040\170\061\075\042\061\066\042\040\171\061\075\042\070\042"
  "\040\170\062\075\042\070\042\040\171\062\075\042\061\066\042\040"
  "\163\164\162\157\153\145\075\042\162\145\144\042\040\163\164\162"
  "\157\153\145\055\167\151\144\164\150\075\042\062\042\040\057\076"
  "\012\074\057\163\166\147\076\000\000\050\165\165\141\171\051\144"
  "\141\164\141\057\002\000\000\000\167\141\162\156\151\156\147\056"
  "\163\166\147\000\000\000\000\000\153\001\000\000\000\000\000\000"
  "\074\163\166\147\040\170\155\154\156\163\075\042\150\164\164\160"
  "\072\057\057\167\167\167\056\167\063\056\157\162\147\057\062\060"
  "\060\060\057\163\166\147\042\040\166\151\145\167\102\157\170\075"
  "\042\060\040\060\040\062\064\040\062\064\042\040\146\151\154\154"
  "\075\042\156\157\156\145\042\040\163\164\162\157\153\145\075\042"
  "\143\165\162\162\145\156\164\103\157\154\157\162\042\040\163\164"
  "\162\157\153\145\055\167\151\144\164\150\075\042\062\042\040\163"
  "\164\162\157\153\145\055\154\151\156\145\143\141\160\075\042\162"
  "\157\165\156\144\042\040\163\164\162\157\153\145\055\154\151\156"
  "\145\152\157\151\156\075\042\162\157\165\156\144\042\076\012\040"
  "\040\040\040\074\160\141\164\150\040\144\075\042\115\061\060\056"
  "\062\071\040\063\056\070\066\114\061\056\070\062\040\061\070\141"
  "\062\040\062\040\060\040\060\040\060\040\061\056\067\061\040\063"
  "\150\061\066\056\071\064\141\062\040\062\040\060\040\060\040\060"
  "\040\061\056\067\061\055\063\114\061\063\056\067\061\040\063\056"
  "\070\066\141\062\040\062\040\060\040\060\040\060\055\063\056\064"
  "\062\040\060\172\042\040\146\151\154\154\075\042\171\145\154\154"
  "\157\167\042\057\076\012\040\040\040\040\074\154\151\156\145\040"
  "\170\061\075\042\061\062\042\040\171\061\075\042\071\042\040\170"
  "\062\075\042\061\062\042\040\171\062\075\042\061\063\042\057\076"
  "\012\040\040\040\040\074\143\151\162\143\154\145\040\143\170\075"
  "\042\061\062\042\040\143\171\075\042\061\067\042\040\162\075\042"
  "\061\042\057\076\012\074\057\163\166\147\076\000\000\050\165\165"
  "\141\171\051\143\157\143\157\156\165\164\056\160\156\147\000\000"
  "\304\006\000\000\000\000\000\000\211\120\116\107\015\012\032\012"
  "\000\000\000\015\111\110\104\122\000\000\000\045\000\000\000\040"
  "\010\006\000\000\000\225\123\261\260\000\000\000\011\160\110\131"
  "\163\000\000\006\016\000\000\006\016\001\051\261\023\322\000\000"
  "\000\031\164\105\130\164\123\157\146\164\167\141\162\145\000\167"
  "\167\167\056\151\156\153\163\143\141\160\145\056\157\162\147\233"
  "\356\074\032\000\000\006\121\111\104\101\124\130\205\315\227\137"
  "\210\135\127\031\305\177\337\076\167\046\351\324\114\030\261\142"
  "\252\351\344\017\244\323\064\215\025\306\032\150\254\325\207\012"
  "\202\151\221\066\012\101\052\366\101\305\320\242\370\120\005\205"
  "\120\137\114\305\026\053\130\244\122\020\037\244\324\007\103\245"
  "\010\332\242\324\110\055\242\017\245\044\004\011\032\323\326\150"
  "\151\323\044\115\346\236\275\277\345\303\336\373\234\163\147\232"
  "\061\025\204\036\070\354\175\317\037\366\072\153\255\157\175\373"
  "\042\211\153\357\270\166\132\022\157\227\063\000\274\163\034\367"
  "\360\066\072\106\377\313\113\273\017\056\254\133\073\152\067\370"
  "\310\326\115\051\134\256\040\013\201\063\243\020\136\233\271\360"
  "\306\113\217\175\345\304\371\377\073\250\233\276\273\161\247\307"
  "\346\366\046\330\315\376\112\330\071\365\056\255\167\007\153\301"
  "\203\023\004\112\206\007\161\256\231\211\173\176\260\160\004\263"
  "\077\005\153\236\230\136\072\375\313\267\012\162\004\340\236\145"
  "\134\176\334\370\355\253\266\272\331\367\203\065\237\060\300\045"
  "\322\122\240\361\004\146\230\201\073\023\363\140\214\134\354\060"
  "\143\207\202\337\331\116\317\276\376\251\207\167\074\152\311\037"
  "\370\371\227\137\370\333\245\200\062\111\354\276\165\341\152\111"
  "\263\277\077\164\364\271\172\143\327\175\233\076\217\364\220\031"
  "\063\206\021\014\300\360\177\216\230\332\220\000\150\202\001\106"
  "\050\240\202\225\171\050\043\106\323\224\147\202\135\060\343\173"
  "\263\227\237\275\357\321\317\035\277\260\032\250\000\360\314\057"
  "\216\034\065\013\333\001\314\314\156\070\060\377\240\047\375\130"
  "\316\214\334\220\203\047\360\323\006\227\071\112\200\033\051\202"
  "\022\170\122\031\313\331\212\024\205\047\221\332\174\117\121\153"
  "\111\366\215\263\147\147\377\360\231\207\256\333\372\137\231\002"
  "\330\175\353\302\225\222\355\270\260\363\334\047\103\260\375\010"
  "\314\040\177\057\160\172\004\021\232\053\262\326\146\226\277\152"
  "\300\222\131\176\266\011\331\015\241\060\126\331\153\054\344\061"
  "\330\213\216\335\374\370\335\177\076\166\121\246\012\133\057\372"
  "\173\333\353\221\355\127\002\171\066\257\034\364\357\006\246\204"
  "\315\045\224\204\073\170\054\014\044\172\226\242\220\103\052\367"
  "\074\366\354\051\102\112\102\111\244\250\053\203\363\324\276\007"
  "\157\330\262\052\250\275\173\255\131\232\213\167\311\101\156\120"
  "\144\123\002\137\343\250\035\000\115\371\231\012\246\003\347\031"
  "\110\177\135\170\221\321\223\120\024\161\234\001\307\261\277\257"
  "\365\366\211\075\077\132\234\271\050\250\243\233\346\157\223\153"
  "\133\007\306\373\205\210\001\241\156\241\174\135\345\031\025\066"
  "\052\073\031\210\242\072\200\052\214\245\126\340\020\307\016\002"
  "\217\134\263\346\265\164\377\105\101\231\354\323\235\134\025\214"
  "\100\143\340\214\241\351\111\271\072\000\025\150\354\131\353\014"
  "\077\140\112\105\132\117\031\230\107\110\255\043\347\113\267\177"
  "\347\372\217\257\000\145\007\054\110\272\245\062\204\100\113\140"
  "\257\214\340\364\010\237\113\075\020\057\347\004\270\352\233\236"
  "\265\211\212\214\164\325\350\205\301\064\166\224\131\063\222\035"
  "\074\160\300\302\004\250\353\316\154\332\046\147\075\052\013\265"
  "\206\275\076\042\256\113\370\154\314\137\130\301\226\305\225\100"
  "\352\145\233\220\061\366\054\051\152\231\264\035\103\131\306\074"
  "\356\174\076\174\140\357\004\050\271\135\225\363\310\100\140\147"
  "\003\376\216\230\273\266\347\305\073\363\166\114\145\020\070\270"
  "\367\200\360\041\260\134\161\325\147\136\300\312\041\016\200\311"
  "\241\155\375\233\313\100\261\226\152\156\067\210\206\223\027\254"
  "\022\061\360\132\347\253\070\000\132\201\014\274\223\231\352\315"
  "\137\257\305\161\016\340\052\141\032\073\336\152\373\155\337\172"
  "\377\207\240\364\076\213\234\147\051\300\224\023\316\065\370\264"
  "\147\160\010\162\266\242\062\257\141\052\201\241\076\070\311\275"
  "\321\314\060\023\001\313\357\224\000\126\020\301\311\277\315\110"
  "\356\064\115\040\046\147\064\012\044\071\112\315\147\201\147\003"
  "\100\114\072\206\203\235\013\244\065\116\032\251\317\044\357\175"
  "\203\327\110\310\062\165\071\326\371\251\147\054\015\202\264\126"
  "\237\017\316\222\125\235\204\036\005\356\167\230\231\231\362\327"
  "\331\366\057\156\076\211\264\201\042\133\241\047\263\041\072\306"
  "\254\273\116\345\054\263\147\164\114\006\053\317\141\135\113\032"
  "\266\242\120\132\124\323\004\114\171\204\174\177\324\330\366\354"
  "\051\111\162\075\051\061\141\154\134\135\014\014\003\225\152\366"
  "\201\301\275\372\251\313\246\314\152\112\223\176\032\062\225\075"
  "\225\075\346\155\146\166\334\262\320\145\203\242\036\351\302\263"
  "\226\377\000\140\267\123\050\200\126\024\100\027\212\223\131\125"
  "\253\321\333\276\022\263\244\216\122\061\275\213\024\235\070\116"
  "\130\114\033\272\135\002\300\302\135\133\236\101\272\021\201\051"
  "\267\222\052\127\225\054\313\250\145\062\366\322\165\363\142\150"
  "\353\332\106\236\133\310\222\166\022\206\136\072\063\303\102\330"
  "\077\261\035\266\024\356\161\245\147\015\032\357\200\365\376\222"
  "\172\060\052\140\064\000\126\357\167\327\055\237\302\310\335\023"
  "\054\201\102\176\077\230\021\143\256\302\204\312\106\062\235\234"
  "\140\012\140\341\316\055\367\053\351\153\265\344\321\320\370\132"
  "\311\130\055\200\312\146\211\000\244\236\071\172\026\103\350\331"
  "\154\232\142\172\121\013\300\247\107\314\257\330\233\157\370\373"
  "\374\327\335\171\212\141\177\123\211\202\211\010\230\354\155\135"
  "\210\166\206\247\063\370\160\236\132\057\001\233\267\061\065\110"
  "\263\327\374\327\117\377\364\330\077\126\060\005\060\277\157\176"
  "\156\052\206\137\031\372\240\034\254\264\233\312\126\145\207\352"
  "\071\062\233\146\145\144\371\174\030\031\203\210\350\202\003\202"
  "\231\007\302\256\077\036\372\353\163\157\012\012\140\353\336\255"
  "\353\361\170\310\260\233\344\125\306\014\102\076\220\166\071\300"
  "\052\357\140\136\201\124\340\265\003\124\331\232\140\110\366\325"
  "\277\074\171\374\201\154\205\213\200\002\130\374\302\342\324\253"
  "\057\377\353\240\340\236\134\160\202\224\331\252\213\342\271\325"
  "\250\262\242\276\065\255\250\120\172\157\145\017\001\342\074\342"
  "\356\347\177\163\342\221\272\356\252\240\352\261\171\317\306\217"
  "\340\341\207\110\327\310\263\174\122\001\120\130\312\343\220\245"
  "\276\022\047\072\100\017\322\161\036\047\244\173\217\374\366\345"
  "\343\303\365\056\011\024\300\342\342\342\324\251\053\116\355\013"
  "\256\173\345\134\115\307\110\016\310\025\225\131\030\354\300\326"
  "\252\164\275\152\146\077\151\144\017\037\075\174\362\310\233\255"
  "\165\311\240\272\027\314\154\343\307\066\176\130\311\367\231\351"
  "\026\304\246\352\271\056\160\363\226\241\060\006\046\336\060\354"
  "\167\202\237\171\063\172\354\304\341\325\377\306\277\145\120\313"
  "\217\315\037\175\367\173\306\151\152\027\255\157\303\154\116\311"
  "\347\014\032\223\275\044\245\123\346\341\205\251\331\313\016\037"
  "\177\172\365\177\305\303\343\077\213\262\351\241\164\123\366\256"
  "\000\000\000\000\111\105\116\104\256\102\140\202\000\000\050\165"
  "\165\141\171\051" };

static GStaticResource static_resource = { resources_resource_data.data, sizeof (resources_resource_data.data) - 1 /* nul terminator */, NULL, NULL, NULL };

G_MODULE_EXPORT
GResource *resources_get_resource (void);
GResource *resources_get_resource (void)
{
  return g_static_resource_get_resource (&static_resource);
}
/* GLIB - Library of useful routines for C programming
 * Copyright (C) 1995-1997  Peter Mattis, Spencer Kimball and Josh MacDonald
 *
 * SPDX-License-Identifier: LGPL-2.1-or-later
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Modified by the GLib Team and others 1997-2000.  See the AUTHORS
 * file for a list of people on the GLib Team.  See the ChangeLog
 * files for a list of changes.  These files are distributed with
 * GLib at ftp://ftp.gtk.org/pub/gtk/.
 */

#ifndef __G_CONSTRUCTOR_H__
#define __G_CONSTRUCTOR_H__

/*
  If G_HAS_CONSTRUCTORS is true then the compiler support *both* constructors and
  destructors, in a usable way, including e.g. on library unload. If not you're on
  your own.

  Some compilers need #pragma to handle this, which does not work with macros,
  so the way you need to use this is (for constructors):

  #ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
  #pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(my_constructor)
  #endif
  G_DEFINE_CONSTRUCTOR(my_constructor)
  static void my_constructor(void) {
   ...
  }

*/

#ifndef __GTK_DOC_IGNORE__

#if  __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)

#define G_HAS_CONSTRUCTORS 1

#define G_DEFINE_CONSTRUCTOR(_func) static void __attribute__((constructor)) _func (void);
#define G_DEFINE_DESTRUCTOR(_func) static void __attribute__((destructor)) _func (void);

#elif defined (_MSC_VER)

/*
 * Only try to include gslist.h if not already included via glib.h,
 * so that items using gconstructor.h outside of GLib (such as
 * GResources) continue to build properly.
 */
#ifndef __G_LIB_H__
#include "gslist.h"
#endif

#include <stdlib.h>

#define G_HAS_CONSTRUCTORS 1

/* We do some weird things to avoid the constructors being optimized
 * away on VS2015 if WholeProgramOptimization is enabled. First we
 * make a reference to the array from the wrapper to make sure its
 * references. Then we use a pragma to make sure the wrapper function
 * symbol is always included at the link stage. Also, the symbols
 * need to be extern (but not dllexport), even though they are not
 * really used from another object file.
 */

/* We need to account for differences between the mangling of symbols
 * for x86 and x64/ARM/ARM64 programs, as symbols on x86 are prefixed
 * with an underscore but symbols on x64/ARM/ARM64 are not.
 */
#ifdef _M_IX86
#define G_MSVC_SYMBOL_PREFIX "_"
#else
#define G_MSVC_SYMBOL_PREFIX ""
#endif

#define G_DEFINE_CONSTRUCTOR(_func) G_MSVC_CTOR (_func, G_MSVC_SYMBOL_PREFIX)
#define G_DEFINE_DESTRUCTOR(_func) G_MSVC_DTOR (_func, G_MSVC_SYMBOL_PREFIX)

#define G_MSVC_CTOR(_func,_sym_prefix) \
  static void _func(void); \
  extern int (* _array ## _func)(void);              \
  int _func ## _wrapper(void);              \
  int _func ## _wrapper(void) { _func(); g_slist_find (NULL,  _array ## _func); return 0; } \
  __pragma(comment(linker,"/include:" _sym_prefix # _func "_wrapper")) \
  __pragma(section(".CRT$XCU",read)) \
  __declspec(allocate(".CRT$XCU")) int (* _array ## _func)(void) = _func ## _wrapper;

#define G_MSVC_DTOR(_func,_sym_prefix) \
  static void _func(void); \
  extern int (* _array ## _func)(void);              \
  int _func ## _constructor(void);              \
  int _func ## _constructor(void) { atexit (_func); g_slist_find (NULL,  _array ## _func); return 0; } \
   __pragma(comment(linker,"/include:" _sym_prefix # _func "_constructor")) \
  __pragma(section(".CRT$XCU",read)) \
  __declspec(allocate(".CRT$XCU")) int (* _array ## _func)(void) = _func ## _constructor;

#elif defined(__SUNPRO_C)

/* This is not tested, but i believe it should work, based on:
 * http://opensource.apple.com/source/OpenSSL098/OpenSSL098-35/src/fips/fips_premain.c
 */

#define G_HAS_CONSTRUCTORS 1

#define G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA 1
#define G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA 1

#define G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(_func) \
  init(_func)
#define G_DEFINE_CONSTRUCTOR(_func) \
  static void _func(void);

#define G_DEFINE_DESTRUCTOR_PRAGMA_ARGS(_func) \
  fini(_func)
#define G_DEFINE_DESTRUCTOR(_func) \
  static void _func(void);

#else

/* constructors not supported for this compiler */

#endif

#endif /* __GTK_DOC_IGNORE__ */
#endif /* __G_CONSTRUCTOR_H__ */

#ifdef G_HAS_CONSTRUCTORS

#ifdef G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA
#pragma G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS(resourcesresource_constructor)
#endif
G_DEFINE_CONSTRUCTOR(resourcesresource_constructor)
#ifdef G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA
#pragma G_DEFINE_DESTRUCTOR_PRAGMA_ARGS(resourcesresource_destructor)
#endif
G_DEFINE_DESTRUCTOR(resourcesresource_destructor)

#else
#warning "Constructor not supported on this compiler, linking in resources will not work"
#endif

static void resourcesresource_constructor (void)
{
  g_static_resource_init (&static_resource);
}

static void resourcesresource_destructor (void)
{
  g_static_resource_fini (&static_resource);
}
